// Mocks generated by Mockito 5.4.2 from annotations
// in find_coffee_app/test/src/test_utils/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:find_coffee_app/src/api/interactor/check_onboarding_interactor.dart'
    as _i4;
import 'package:find_coffee_app/src/common/storage.dart' as _i7;
import 'package:find_coffee_app/src/config/route.dart' as _i2;
import 'package:find_coffee_app/src/config/router.dart' as _i6;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomRoute_0 extends _i1.SmartFake implements _i2.CustomRoute {
  _FakeCustomRoute_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoute_1<T> extends _i1.SmartFake implements _i3.Route<T> {
  _FakeRoute_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CheckOnboardingInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckOnboardingInteractor extends _i1.Mock
    implements _i4.CheckOnboardingInteractor {
  MockCheckOnboardingInteractor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Router].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouter extends _i1.Mock implements _i6.Router {
  MockRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomRoute get initialRoute => (super.noSuchMethod(
        Invocation.getter(#initialRoute),
        returnValue: _FakeCustomRoute_0(
          this,
          Invocation.getter(#initialRoute),
        ),
      ) as _i2.CustomRoute);

  @override
  _i3.Route<dynamic> generateRoute(_i3.RouteSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRoute,
          [settings],
        ),
        returnValue: _FakeRoute_1<dynamic>(
          this,
          Invocation.method(
            #generateRoute,
            [settings],
          ),
        ),
      ) as _i3.Route<dynamic>);

  @override
  _i2.CustomRoute? mapToRoute(_i3.RouteSettings? settings) =>
      (super.noSuchMethod(Invocation.method(
        #mapToRoute,
        [settings],
      )) as _i2.CustomRoute?);

  @override
  _i5.Future<dynamic> pushTo(
    _i2.CustomRoute? route, {
    bool? shouldShowAsDialog = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushTo,
          [route],
          {#shouldShowAsDialog: shouldShowAsDialog},
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> replaceTo(_i2.CustomRoute? route) => (super.noSuchMethod(
        Invocation.method(
          #replaceTo,
          [route],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  void pop<T extends Object>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i7.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  _i5.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
